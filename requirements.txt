import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.manifold import TSNE
from sklearn.ensemble import IsolationForest

# Charger les données
data = pd.read_csv("votre_fichier.csv")  # Remplacez "votre_fichier.csv" par le nom de votre fichier de données

# Standardiser les données
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

# Appliquer t-SNE pour réduire à 2 dimensions
tsne = TSNE(n_components=2, random_state=42)
tsne_components = tsne.fit_transform(data_scaled)

# Créer un DataFrame pour les deux dimensions t-SNE
tsne_df = pd.DataFrame(data=tsne_components, columns=['Dimension 1', 'Dimension 2'])

# Créer un modèle Isolation Forest avec les caractéristiques d'origine
model_original = IsolationForest(contamination=0.1, random_state=42)
model_original.fit(data)

# Prédire les anomalies avec les caractéristiques d'origine
predictions_original = model_original.predict(data)
predictions_original = np.where(predictions_original == -1, 1, 0)  # Transformer les prédictions en 1 pour anomalies, 0 pour non anomalies

# Visualisation des prédictions avec les caractéristiques d'origine
plt.figure(figsize=(10, 6))
plt.scatter(tsne_df['Dimension 1'], tsne_df['Dimension 2'], c=predictions_original, cmap='coolwarm', alpha=0.5)
plt.title('Détection d\'anomalies avec les caractéristiques d\'origine')
plt.xlabel('Dimension 1')
plt.ylabel('Dimension 2')
plt.colorbar(label='Anomalie')
plt.grid()
plt.show()

# Créer un modèle Isolation Forest avec les composantes principales
pca = PCA(n_components=2)
principal_components = pca.fit_transform(data_scaled)
model_pca = IsolationForest(contamination=0.1, random_state=42)
model_pca.fit(principal_components)

# Prédire les anomalies avec les composantes principales
predictions_pca = model_pca.predict(principal_components)
predictions_pca = np.where(predictions_pca == -1, 1, 0)  # Transformer les prédictions en 1 pour anomalies, 0 pour non anomalies

# Visualisation des prédictions avec les composantes principales
plt.figure(figsize=(10, 6))
plt.scatter(tsne_df['Dimension 1'], tsne_df['Dimension 2'], c=predictions_pca, cmap='coolwarm', alpha=0.5)
plt.title('Détection d\'anomalies avec les composantes principales')
plt.xlabel('Dimension 1')
plt.ylabel('Dimension 2')
plt.colorbar(label='Anomalie')
plt.grid()
plt.show()
