Flask==2.2.2
imageio==2.25.0
keras==2.11.0
numpy==1.23.5
Pillow==9.4.0
python_resize_image==1.1.20
requests==2.28.1
tensorflow==2.11.0

'id', 'dhost', 'user', 'iup', 'date_alerte', 'dateFinContrat',
       'dlpdata', 'dlpmeta', 'raw_metier', 'dlpfilename', 'urlc', 'user_agent',
       'status', 'feature_contrat', 'feature_classification',
       'feature_department', 'feature_position_title', 'feature_download',
       'feature_downloadc1', 'feature_downloadc2', 'feature_downloadc3',
       'feature_downloadc4', 'feature_upload', 'feature_uploadc1',
       'feature_uploadc2', 'feature_uploadc3', 'feature_uploadc4'


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.feature_extraction.text import TfidfVectorizer

# Chargement des données
data = pd.read_csv("votre_fichier.csv")

# Feature Engineering

# Extraction des caractéristiques temporelles
data['alerte_fin_contrat_duration'] = (pd.to_datetime(data['date_alerte']) - pd.to_datetime(data['dateFinContrat'])).dt.days
data['alerte_month'] = pd.to_datetime(data['date_alerte']).dt.month
data['alerte_day_of_week'] = pd.to_datetime(data['date_alerte']).dt.dayofweek

# Traitement des colonnes texte
data['dhost_length'] = data['dhost'].apply(len)
data['user_agent_length'] = data['user_agent'].apply(len)
data['metier_keyword_count'] = data['raw_metier'].str.lower().str.count('votre_mot_clé')  # Remplacez 'votre_mot_clé' par le mot-clé pertinent
data['filename_length'] = data['dlpfilename'].apply(len)

# Caractéristiques basées sur les interactions entre les variables
data['classification_position'] = data['feature_classification'] + '_' + data['feature_position_title']
data['download_upload_ratio'] = data['feature_download'] / data['feature_upload']

# Encodage des variables catégorielles
data = pd.get_dummies(data, columns=['feature_department', 'feature_position_title', 'feature_downloadc1', 'feature_downloadc2', 'feature_downloadc3', 'feature_downloadc4', 'feature_uploadc1', 'feature_uploadc2', 'feature_uploadc3', 'feature_uploadc4'])

# Traitement des colonnes de texte supplémentaires
text_columns = ['iup', 'dlpdata', 'dlpmeta', 'raw_metier']
for column in text_columns:
    tfidf = TfidfVectorizer()
    tfidf_features = tfidf.fit_transform(data[column].astype(str))
    tfidf_df = pd.DataFrame(tfidf_features.toarray(), columns=[column + '_' + c for c in tfidf.get_feature_names()])
    data = pd.concat([data, tfidf_df], axis=1)

 Extraction des caractéristiques temporelles
data['alerte_fin_contrat_duration'] = (pd.to_datetime(data['date_alerte']) - pd.to_datetime(data['dateFinContrat'])).dt.days
data['alerte_month'] = pd.to_datetime(data['date_alerte']).dt.month
data['alerte_day_of_week'] = pd.to_datetime(data['date_alerte']).dt.dayofweek

# Traitement des colonnes texte
data['dhost_length'] = data['dhost'].apply(len)
data['user_agent_length'] = data['user_agent'].apply(len)
data['metier_keyword_count'] = data['raw_metier'].str.lower().str.count('votre_mot_clé')  # Remplacez 'votre_mot_clé' par le mot-clé pertinent
data['filename_length'] = data['dlpfilename'].apply(len)

# Caractéristiques basées sur les interactions entre les variables
data['classification_position'] = data['feature_classification'] + '_' + data['feature_position_title']
data['download_upload_ratio'] = data['feature_download'] / data['feature_upload']

import pandas as pd

# Création d'un DataFrame avec les données d'origine
data = pd.DataFrame({'raw_metier': ['NC', 'BPCE', 'MIROVA', 'NATIXIS BANK JSC', 'BPCE-IT', 'MIROVA UK', 'NATIXIS', 'USA', 'NFA',
                                   'NATIXIS INVESTMENT MANAGERS INTERNATIONAL', 'Ostrum', 'NATIXIS IM UK LIMITED',
                                   'NATIXIS LONDON BRANCH', 'NATIXIS NORTH AMERICA LLC', 'BPCE INFOGERANCE ET TECHNOLOGIES',
                                   'NATIXIS INVESTMENT MANAGERS', 'MIROVA US LLC', 'NATIXIS INTEREPARGNE', 'BPCE LEASE',
                                   'BIMPLI', 'NIE', 'NATIXIS IM, SUCURSAL EN ESPAÑA', 'NATIXIS - SUCURSAL EM PORTUGAL',
                                   'HOLDING PARIS', 'CIB_London', 'NLE', 'COMPAGNIE EUROPEENNE DE GARANTIES ET CAUTIONS SA',
                                   'BPCE FINANCEMENT', 'SEVENTURE PARTNERS', 'THEMATICS ASSET MANAGEMENT']})

# Regroupement des "raw metiers"
regroupements = {
    'MIROVA UK': 'MIROVA',
    'BPCE-IT': 'BPCE',
    'BPCE INFOGERANCE ET TECHNOLOGIES': 'BPCE',
    'BPCE LEASE': 'BPCE',
    'BPCE FINANCEMENT': 'BPCE',
    'NATIXIS BANK JSC': 'NATIXIS',
    'NATIXIS IM UK LIMITED': 'NATIXIS',
    'NATIXIS LONDON BRANCH': 'NATIXIS',
    'NATIXIS NORTH AMERICA LLC': 'NATIXIS',
    'NATIXIS INVESTMENT MANAGERS INTERNATIONAL': 'NATIXIS',
    'NATIXIS IM, SUCURSAL EN ESPAÑA': 'NATIXIS',
    'NATIXIS - SUCURSAL EM PORTUGAL': 'NATIXIS',
    'CIB_London': 'NATIXIS'
}

data['raw_metier'] = data['raw_metier'].apply(lambda x: regroupements.get(x, x))

# Regrouper les catégories restantes sous la catégorie "Other"
categories_autres = data['raw_metier'].unique()
categories_conservees = ['MIROVA', 'BPCE', 'NATIXIS']

data['raw_metier'] = data['raw_metier'].apply(lambda x: x if x in categories_conservees else 'Other')

# Répartition des "raw metiers" après les regroupements
repartition = data['raw_metier'].value_counts().reset_index()
repartition.columns = ['raw_metier', 'count']

print(repartition)

